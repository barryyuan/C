1. Write a C program that asks the user to enter two positive integers, then compute and display their greatest common divisor (gcd). 
Enter two integers: 12 28(input from user)
The greatest common divisor is: 4(output from the program)
	Hint: The Euclidean algorithm is an efficient method for computing the greatest common divisor (GCD). It is based on the principle that the greatest common divisor of two numbers does not change if the smaller number is subtracted from the larger number. For example, 21 is the GCD of 252 and 105 (252 = 21 × 12; 105 = 21 × 5); since 252 − 105 = 147, the GCD of 147 and 105 is also 21. Since the larger of the two numbers is reduced, repeating this process gives successively smaller numbers until one of them is zero. Use the Euclidean algorithm to define a function gcd(a, b) which returns the gcd of 2 positive integers a & b following the pseudo-code below: 
   1. set the larger number of (a, b) to m, and the smaller number to n, so that m>n;
   2. divide m by n and obtain the remainder r;
   3. set m=n and n=r, repeat step 2 until r is zero;
   4. return n from the preceding step as gcd(a, b).



#include<stdio.h>
int main()
{
	int a,b,m,n,r=1,c;
	printf("Enter two integers:");
	scanf("%d %d",&a,&b);
	if (a>=b) {m=a;n=b;}
	else {m=b;n=a;}
	while(r>0)
	{
	    r=m-n;m=n;n=r;
		if (m<n)
		{c=m;m=n;n=c;}
		
	}
	
   printf("The greatest common divisor is:%d\n",m);
   return 0;	
	
}

2. Write a program that creates two eight-element arrays of double s and uses a loop to let the user enter values for the eight elements of the first array. Have the program set the elements of the second array to the cumulative totals of the elements of the first array. For example, the fourth element of the second array should equal the sum of the first four elements of the first array, and the fifth element of the second array should equal the sum of the first five elements of the first array. (It’s possible to do this with nested loops, but by using the fact that the fifth element of the second array equals the fourth element of the second array plus the fifth element of the first array, you can avoid nesting and just use a single loop for this task.) Finally, use loops to display the contents of the two arrays, with the first array displayed on one line and with each element of the second array displayed below the corresponding element of the first array.

#include<stdio.h>
int main()
{
	int i;
    double s[8],cs[8];
	for (i=0;i<8;i++)
	scanf("%lf",&s[i]);
	
	cs[0]=s[0];
	
	for(i=1;i<8;i++)
	cs[i]=cs[i-1]+s[i];
	
	for(i=0;i<8;i++)
	printf("%lf",s[i]);
	
	printf("\n");
	
	for(i=0;i<8;i++)
	printf("%lf",cs[i]);
	return 0;
}
3. Have a program request the user to enter an uppercase letter. Use nested loops to produce a pyramid pattern like this:
A
ABA
ABCBA
ABCDCBA
ABCDEDCBA
The pattern should extend to the character entered. For example, the preceding pattern would result from an input value of E. Hint: Use an outer loop to handle the rows. Use three inner loops in a row, one to handle the spaces, one for printing letters in ascending order, and one for printing letters in descending order.

#include<stdio.h>
int main()
{
	int i,j,k,l;
	char ch;
	printf("please input a value:");
	scanf("%c",&ch);
	for (i=1;i<=5;i++)
	{
		for (j=1;j<=5-i;j++)
		printf(" ");
		for (k=1;k<=i;k++)
		printf("%c",ch-5+k);
		for(l=1;l<i;l++)
		printf("%c",ch-5+i-l);

		printf("\n");
	}
	
	
}


4. Write a program that reads integers until 0 is entered. After input terminates, the program should report the total number of even integers (excluding the 0) entered, the average value of the even integers, the total number of odd integers entered, and the average value of the odd integers.

#include<stdio.h>
int main()
{
	int a,total_even=0,total_odd=0,num_even=0,num_odd=0;
	float average_even,average_odd;
    scanf("%d",&a);
	while (a!=0)
	{ 
	 
	  if(a%2==0)
	  { 
	    total_even=total_even+a; 
	    num_even++; 
	  }
	  else
	  {
	    total_odd=total_odd+a;
	     num_odd++;
	  }  
	  scanf("%d",&a);
	}
	average_even= float(total_even)/num_even;
	average_odd=float(total_odd)/num_odd;
	printf("The total number of even integers:%d\n",num_even);
    printf("The average value of even integers:%f\n",average_even);
    printf("The total number of odd integers:%d\n",num_odd);
    printf("The average value of odd integers:%f\n",average_odd);
    return 0;
    
}

5. Suppose the income tax of PRC is calculated according to the schedule below: 
Salary per month	Income tax
Below 3,000	0
3,000 – 6,000	0+10% of amount of salary over 3,000
6,000 – 10,000	300+15% of amount of salary over 6,000
10,000 – 20,000	900+20% of amount of salary over 10,000
20,000 – 40,000	2900+25% of amount of salary over 20,000
Above 40,000	7900+30% of amount of salary over 40,000
Write a program in C to calculate the income tax after inputting your salary.

#include<stdio.h>
int main()
{
	double income,tax;
	printf("please input your salary:");
	scanf("%lf",&income);
	if (income<3000)
	tax=0;
	else if(income<6000)
	tax=(income-3000)*0.1;
	else if(income<10000)
	tax=300+(income-6000)*0.15;
	else if(income<20000)
	tax=900+(income-10000)*0.2;
	else if(income<40000)
	tax=2900+(income-20000)*0.25;
	else 
	tax=7900+(income-40000)*0.3;
	printf("The tax is:%lf",tax);
	return 0;
	
}


6. Write a program that requests the hours worked in a week and then prints the gross pay, the taxes, and the net pay. Assume the following:
a. Basic pay rate = $10.00/hr
b. Overtime (in excess of 40 hours) = time and a half
c. Tax rate: #15% of the first $300
20% of the next $150
25% of the rest

#include<stdio.h>
int main()
{
	double hours,gross_pay,tax,net_pay;
	printf("please input the hours worked in a week");
	scanf("%lf",&hours);
    if (hours<40)
    gross_pay=10*hours;
    else 
    gross_pay=400+(hours-40)*15;
    
    if (gross_pay<300)
    tax=gross_pay*0.15;
    else if(gross_pay<450)
    tax=45+(gross_pay-300)*0.2;
    else 
    tax=75+(gross_pay-450)*0.25;
    
    net_pay=gross_pay-tax;
    printf("gross pay:%f,the taxes:%f,the net pay:%f",gross_pay,tax,net_pay);
}


7. The ABC Mail Order Grocery sells artichokes for $2.05 per pound, beets for $1.15 per pound, and carrots for $1.09 per pound. It gives a 5% discount for orders of $100 or more prior to adding shipping costs. It charges $6.50 shipping and handling for any order of 5 pounds or under, $14.00 shipping and handling for orders over 5 pounds and under 20 pounds, and $14.00 plus $0.50 per pound for shipments of 20 pounds or more. Write a program that uses a switch statement in a loop such that a response of a lets the user enter the pounds of artichokes desired, b the pounds of beets, c the pounds of carrots, and q allows the user to exit the ordering process. The program should keep track of cumulative totals. That is, if the user enters 4 pounds of beets and later enters 5 pounds of beets, the program should use report 9 pounds of beets. The program then should compute the total charges, the discount, if any, the shipping charges, and the grand total. The program then should display all the purchase information: the cost per pound, the pounds ordered, and the cost for that order for each vegetable, the total cost of the order, the discount (if there is one), the shipping charge, and the grand total of all the charges.

#include<stdio.h>

int main(void)
{
  const double price_artichokes=2.05;
  const double price_beets=1.15;
  const double price_carrots=1.09;
  const double discount_rate=0.05;
  char ch='s';
double lb_artichokes=0,artichokes;
double lb_beets=0,beets;
double lb_carrots=0,carrots;
double lb_total;

double cost_artichokes;
double cost_beets;
double cost_carrots;
double cost_total;
double final_total;
double discount;
double shiping;

printf("Enter a to buy artichokers, b for beets, c for carrots, q to quit:");

while(ch!='q')
{

scanf("%c",&ch);
if (ch=='\n')
continue;

switch(ch)
{
case 'a': printf("Enter pounds of artichokes:");
scanf("%lf",&artichokes);
lb_artichokes+=artichokes;
break;
case 'b': printf("Enter pounds of beets:");
scanf("%lf", &beets);
lb_beets=beets+lb_beets;
break;
case 'c': printf("Enter pounds of carrots: ");
scanf("%lf",&carrots);
lb_carrots=carrots+lb_carrots;
break;
default : printf("%c is not a valid choice.\n",ch);
}

printf("Enter a to buy artichokers, b for beets, c for carrots, q to quit:");
}
cost_artichokes=price_artichokes*lb_artichokes;
cost_beets=price_beets*lb_beets;
cost_carrots=price_carrots*lb_carrots;
cost_total=cost_artichokes+cost_beets+cost_carrots;
lb_total=lb_artichokes+lb_beets+lb_carrots;
if(lb_total<=0)
shiping=0;
else if (lb_total<5.0)
shiping=6.50;
else if(lb_total<20)
shiping=14.0;
else 
shiping =14.0+0.5*lb_total;
if (cost_total>100.0)
discount=discount_rate*cost_total;
else
discount=0.0;
final_total=cost_total+shiping-discount;
printf("Your order:\n");
printf("%.2f lbs of artichokes at $%.2f per pound:$ %.2f\n",lb_artichokes,
 price_artichokes,cost_artichokes);
printf("%.2f lbs of beets at $%.2f per pound:$ %.2f\n",lb_beets, 
price_beets,cost_beets);
printf("%.2f lbs of carrots at $%.2f per pound:$ %.2f\n",lb_carrots, 
price_carrots, cost_carrots);
printf("Total cost of vegetables: $%.2f\n", cost_total);
if (cost_total>100)
printf("Volume discount: $%.2f\n",discount);
printf("Shipping: $%.2f\n",shiping);
printf("Total charges: $%.2f\n",final_total);
return 0;
}



1. Write a C program to calculate e, the base of the natural log function, using the following formula with x=1, and sum up to the first 1000 terms, instead of infinite terms. 
 
#include <stdio.h>
#include <math.h>
Int main()
{
 float e=0,t=1.0,i=1,x;
 scanf("%f",&x);
for(i=1;i<1000;i++)
  {
  e=e+t;
  t=t*x/i;
  }
  printf("%f,%f\n",e,exp(x));
return 0;
}

3. Use the following power series expansion in a C program to compute sin(x) and cos(x) for any x<1 to an accuracy of 1.0e-5. [Hint: use double data type to make sure you have enough accuracy]
 
#include <stdio.h>
#include <math.h>
int main()
{
 float sin_x=0,t=1.0,i=1,x;
 scanf("%f",&x);
 t=t*x;
 while (fabs(t)>=1.0e-5)
  {
  sin_x=sin_x+t;	
  i=i+2;
  t=-t*x*x/(i*(i-1));
  }
  printf("%f,%f\n",sin_x,sin(x));
return 0;
}

                
